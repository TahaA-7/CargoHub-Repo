# This workflow will install Python dependencies, run tests, and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    # Replace 'ubuntu-latest' with your self-hosted runner label
    runs-on: [self-hosted, cicd]  # self-hosted runner group and label
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest and coverage
    #   run: |
    #     pytest
    #     pytest --cov --cov-report term --cov-report xml:coverage.xml
    #     coverage run -m pytest
    #     coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
    #     coverage report --fail-under=100

    - name: Store coverage report
      uses: actions/upload-artifact@v4
      with:
        path: coverage.xml

      if: always()

#    - name: Set up SSH
#      run: |
#        mkdir -p ~/.ssh
#        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa_new
#        chmod 600 ~/.ssh/id_rsa_new
#        ssh-keyscan -H 145.24.223.158 >> ~/.ssh/known_hosts
#    # Deploy to the server
#    - name: Deploy application
#      run: |
#        ssh ubuntu@145.24.223.158 << 'EOF'
#          # Commands to deploy your application (for example)
#          cd /path/to/your/app
#          git pull origin main
#
#        EOF
  deployment:
    # Replace 'ubuntu-latest' with your self-hosted runner label
    runs-on: [self-hosted, cicd]  # self-hosted runner group and label
    needs: build
    environment: production
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa_new
          chmod 600 ~/.ssh/id_rsa_new
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa_new
      - name: Install python3-venv
        run: |
          sudo apt-get update || exit 1
          sudo apt-get install -y python3-venv || exit 1

      - name: Deploy Django Application
        run: |
          cd /home/ubuntu-1069707/CargoHub/CargoHub-Repo/cargohub || exit 1
          git pull origin main || exit 1
          
          # Ensure python3-venv is installed
          sudo apt-get update || exit 1
          sudo apt-get install -y python3-venv || exit 1
          
          # Create venv if it does not exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv || exit 1
          fi

          # Activate the virtual environment
          source venv/bin/activate || exit 1

          # Install dependencies
          pip install -r requirements.txt || exit 1
          
          # Run migrations and collectstatic
          python manage.py migrate --noinput || exit 1
          python manage.py collectstatic --noinput || exit 1

        

